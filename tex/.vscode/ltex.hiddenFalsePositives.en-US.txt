{"rule":"WHETHER","sentence":"^\\QThese problems include the inclusion problem, i.e. the question of whether \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q holds for two given Petri nets \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, even in the simple case that the nets do not use \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q as label and that the acceptance condition is trivial, i.e. it is coverability with respect to the zero vector.\\E$"}
{"rule":"NNS_THAT_AGREEMENT","sentence":"^\\QIn the publication, we have compared this implementation to another approach to solving context-free games that works by first computing an equivalent instance of Cachat's context-free games and then applying Cachat's algorithm.\\E$"}
{"rule":"CONFUSION_OF_THESES_THESE","sentence":"^\\QOne should note that both our publication, and the theses by Stutz and Haifani, use randomly generated instances for the evaluation of the implementations.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QHence, we may assume that there is an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-covering computation, say \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QWe show that there is a firing sequence \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q such that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is also an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-covering computation, \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a subword of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q satisfies the bound \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QOur goal is to remove infixes of the computation, resulting in an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-covering computation in which no two markings agree on their restriction to the first \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q places.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QIn total, we have obtained that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-covering computation with \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, and the desired bound holds.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QIn particular, the computation obtained by now firing \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-covering computation.\\E$"}
{"rule":"WHETHER","sentence":"^\\QWe have not investigated the complexity of regular containment and the question of whether a given Petri net coverability language is upward or downward closed in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, neither for general Petri nets nor for BPP nets.\\E$"}
{"rule":"WHETHER","sentence":"^\\QThis boils down to the question of whether there is an infinitely branching non-\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q WSTS whose language is not the language of a finitely branching WSTS.\\E$"}
{"rule":"AGREEMENT_SENT_START","sentence":"^\\QArguably, the most interesting one is the question on whether the inclusions among language classes in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q are strict.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qpushdown systems.[0.24][c] multi-pushdown systems.[0.24][c] VASSes / Petri nets.[0.24][c] integer VASSes / integer Petri nets.[0.24][c] Graphs for which valence systems over the corresponding graph monoids are\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qconsists of preliminaries.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qpresents our results on the closures of Petri net coverability languages.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qis concerned with results related to the regular separability of WSTS languages.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qpresents our results on solving games.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qforms the conclusion.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QA conditional is of the shape if (cond) then, consisting of a conditional expression cond, followed by some finite number statements, followed by else, followed by some finite number of statements, followed by end.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QIf the statement is an atomic statement \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we get the rule \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, using a as a terminal symbol.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIf the statement in the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q line of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a conditional if (cond) then, we get two rules \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qassume\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qassume\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"DT_DT","sentence":"^\\QWe associate it to each atomic statement a a function \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q that specifies the transformation of the current storage that is applied by executing a.\\E$"}
{"rule":"WHETHER","sentence":"^\\QThe question of whether the inclusions among language classes are strict is left open.\\E$"}
{"rule":"SOME_OF_THE","sentence":"^\\QWe were unable to construct counterexamples to show that the inclusions are strict, as well as unable to extend the constructions to show that some of the inclusions are in fact equalities.\\E$"}
{"rule":"WHETHER","sentence":"^\\QWe leave the question of whether the assumptions that we make are necessary unanswered.\\E$"}
{"rule":"THE_SENT_END","sentence":"^\\QWe associate it to each atomic statement a a function \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q that specifies the transformation of the current storage that is applied by executing a.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIf the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q line of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is if (cond) then, then the rule associated to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is either \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qassert\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q or \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qassert\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, depending on whether \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q evaluates to true.\\E$"}
{"rule":"THE_SENT_END","sentence":"^\\QThe rules are modified as follows: If the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q line of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is an atomic statement \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we get the rule \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, where \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is the index of the next line as explained before, and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is the result of applying the transformation that corresponds to executing a.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QRecall that in the net \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, each transition has an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled variant.\\E$"}
{"rule":"IN_A_X_MANNER","sentence":"^\\QCan a net with the language \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q whose unary encoding is polynomial in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q be constructed in a different way?\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QA representation for \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is easy to compute by inserting an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled variant of each transition in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q downward \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QFor the correctness of the construction, it will be crucial that the synchronized product acts as a one-sided synchronized product in the special case at hand: (1) \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q has no \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled transitions, so all transitions of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q have to be synchronized with an appropriate transition of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, while (2) \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q has an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled version of each transition, so each transition can be fired freely.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe have \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q,\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, which proves two of the base cases.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QTo obtain a representation of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we take the automaton \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and add for each transition an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled variant as described in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe claim that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qpump\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qpump\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is as required.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QTo construct \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we add for each transition \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q that is labeled by a symbol \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled version of this transition, \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"WHETHER","sentence":"^\\QHowever, the size of the Karp-Miller tree is known to be non-primitive recursive in the worst case, and the paper leaves the question of whether a smaller construction exists unanswered.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QGiven a Petri net \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we can construct a Petri net \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q by adding for each transition an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled version.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QFor downward closures, one needs to carefully look at the shape of the language obtained by complementing an upward-closed language.\\E$"}
{"rule":"AGREEMENT_SENT_START","sentence":"^\\QWe want to obtain a classification result that specifies exactly for which automata models we can hope to solve games on the induced infinite game arenas.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QWhen the universal player takes an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q transition in the valence game, this should cancel out the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q symbol, i.e. she should pop \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q in the pushdown game.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QConsider an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for some \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q with \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"COMMA_COMPOUND_SENTENCE_2","sentence":"^\\QIt remains to translate the zero-test transitions \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q that may be present in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q but that are not available to us in the valence game.\\E$"}
{"rule":"SOME_OF_THE","sentence":"^\\QA similar reasoning holds for all \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.[0.45][c] Hence, some of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) are adjacent to all \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q while the others (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) are not adjacent to any \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.[0.45][c] If any of the thick dashed edges among the nodes in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q exists, the graph contains the 2 illegal graph[0.45][c] If any of the thick dashed edges from \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is missing, the graph contains the 3 illegal graph.[0.45][c] The resulting graph is the product of a pushdown with nodes \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and a group with nodes \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe translate \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q as \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, respectively, similar for counter \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QFurthermore, it can also not be canceled by a hypothetical later occurrence of an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q operation.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThe final \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q cannot be canceled using an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q operation in the prefix \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q as argued before.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThe effect of the first modification is obvious: It puts an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q into the storage that will be present for the rest of the play until it may be eventually canceled by the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled transition to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThe state \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q has two transitions: \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled transition to the old final state, and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled transition to the new final state.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QIf the counter value is not zero, the universal player can prove this by taking an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled transition to a deadlock state \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qdead.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QWe first go to a fresh control state \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q owned by the universal player using an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled transition.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qof the algorithm, instead of a sequence of automata, we would now have to deal with a sequence of games.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QSimilarly, the saturation does not carry over if we consider a set of states that are not owned by a single player: After taking an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled transition, the other player may become active, so it is not clear to the player that chose \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q whether a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q transition will follow later.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QAdding an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-transition might lead to another transition being added in the next iteration, but since we only add transitions but no control states, the process terminates after at most a quadratic number of steps.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QFor the simulation, we simply replace every transition that would introduce the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q context switch by an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled transition that leads to a deadlock.\\E$"}
{"rule":"THE_SUPERLATIVE","sentence":"^\\QThen \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q has a least fixed point, namely \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"THE_SUPERLATIVE","sentence":"^\\QWe can dualize this result to obtain that meet-continuous functions over meet-semilattices have greatest fixed points.\\E$"}
{"rule":"THE_SUPERLATIVE","sentence":"^\\QEvery join-semilattice is a CPPO, so Kleene's theorem guarantees the existence of least fixed points for join-continuous functions.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QWe define the i th approximant \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to be \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q the variable assignment obtained by an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-fold application of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, the least element of the product domain.\\E$"}
{"rule":"SOME_OF_THE","sentence":"^\\QProving an upper bound tighter than \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q will be crucial for some of the complexity-theoretic considerations in this part of the thesis.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qfor concatenation.\\E$"}
{"rule":"OVER_COMPOUNDS","sentence":"^\\QThe idea behind using formulas over states is the following.\\E$"}
{"rule":"OVER_COMPOUNDS","sentence":"^\\QThe definition will follow the intuition behind the translation from words to formulas over states we have explained earlier.\\E$"}
{"rule":"OF_ANY_OF","sentence":"^\\QRecall that the order of a HORS is the maximum order of any of its non-terminals, where the order of a term is the order of the associated kind.\\E$"}
{"rule":"OVER_COMPOUNDS","sentence":"^\\QWhen considering higher-order games, we could get away with using formulas over states.\\E$"}
{"rule":"OVER_COMPOUNDS","sentence":"^\\QThe abstract domain for the associated kind is the set of functions from formulas over states to formulas over states.\\E$"}
{"rule":"OVER_COMPOUNDS","sentence":"^\\QThis contradiction is resolved by observing that we associate formulas over states to terms of order zero.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe define the equivalence \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q on \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to be equality.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QEven if we chose a different preimage for \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we end up with an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-equivalent result.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QBy \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, this also means that any element that is \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-equivalent to an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-image is permeable.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QTo see that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, the function that sends any element \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, consider such an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QWe also prove that if we modify the valuation \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q by exchanging its entries for \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-equivalent ones, we obtain an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-equivalent result.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe now use \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and apply the induction hypothesis again to get \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q as desired.\\E$"}
{"rule":"SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA","sentence":"^\\QAlso by \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we get that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is compatible.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QHence, \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-preimage of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q (modulo \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) and we may use the definition of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for functions.\\E$"}
{"rule":"DT_JJ_NO_NOUN","sentence":"^\\QA term that only consists of a nonterminal does not contain a free variable.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QSpecify \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q by defining the interpretation of variables (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q), function application (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q), and lambda abstraction ( \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q).\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe need to prove join-continuity in both parameters, which we will do simultaneously.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QFor \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and a nonterminal \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q whose unique rule in the HORS is \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, the right-hand side for \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q evaluated at \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QThe concrete solution satisfies \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q .\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QFor a derivation of a word \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q of height exactly \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we consider the associated derivation tree.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QOmega.-regular inclusion.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QWe have \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q .\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QWe define an infinite sequence of triples \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q so that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a descending chain of infinite subsets of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, i.e. \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q , each \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a node so that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is the color of all edges \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe choose \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q so that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is infinite.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe find an interpretation of the syntax used in the system of equations on the domain \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe solve the interpreted system of equations over \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe can now read off the answer to the verification problem from the solution.\\E$"}
{"rule":"SOME_OF_THE","sentence":"^\\QIf some of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q are terminals, we omit the corresponding stack symbols (but we still include \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q in the compositions that form the second component of the other stack symbols).\\E$"}
{"rule":"DT_JJ_NO_NOUN","sentence":"^\\QAssume that the rightmost symbol \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a nonterminal.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe then store the terminal prefix by updating the control state to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QOmega.-context-free inclusion games.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QThe operation preprocess\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q applied to a sentential form \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q prefixes the first symbol by \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, replaces all other symbols \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q by the family \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, and connects them using the composition operator \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q .\\E$"}
{"rule":"POSSESSIVE_APOSTROPHE","sentence":"^\\QIt uses \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, the set of terminal symbols and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q as constants, and the binary operators concatenation \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q , disjunction \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, and conjunction \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QIt uses \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, the set of terminal symbols and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q as constants, and the binary operators concatenation \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q , disjunction \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, and conjunction \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QThe monoid operation is formula composition \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q , and the atom \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is the neutral element.\\E$"}
{"rule":"DT_JJ_NO_NOUN","sentence":"^\\QFormally, we have a system of equations with variables of the shape \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, where \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a (source) state and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a nonterminal.\\E$"}
{"rule":"NUMEROUS_DIFFERENT","sentence":"^\\QHowever, the words derivable from \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q can lead to many different target states, and a priori it is not clear to which ones.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QFormally, we define a new composition operator \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q .\\E$"}
{"rule":"OVER_COMPOUNDS","sentence":"^\\QThe domain is \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q factored by logical equivalence, i.e. equivalence classes of positive Boolean formulas over states of the DFA, ordered by implication.\\E$"}
{"rule":"WHETHER","sentence":"^\\QThe result is a theory that allows us to clearly formulate the question of whether compositional verification is possible.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe mimic this model by defining the parallel composition \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q of two languages \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q over \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q as the set of words over \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q such that if we project a word to one of the alphabets (by removing all letters not contained in that alphabet), we obtain a word in the corresponding language.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qof this thesis are concerned with studying the theory behind these decision problems.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qto \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"CONFUSION_OF_OUR_OUT","sentence":"^\\QAs we pointed out earlier, deciding properties of finite automata is simple.\\E$"}
{"rule":"WHETHER","sentence":"^\\QThe verification problem for a system \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and a specification \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is typically equivalent to the question of whether the inclusion \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q holds.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qof this thesis.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QThis means our template may contain conditionals that are of the form if (???) then ... else ... .\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QThe conditional expression that we need to synthesize is \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, and hence the completed source-code for procedure p() is if (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) then f(); else g(); .\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QAssume that the source code for p() is if (???) then f(); else g(); .\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QAssume in the program template, some procedure p() is specified by the source code if (x) then f(); else g(); .\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qso that the resulting program satisfies the specification.\\E$"}
{"rule":"WHETHER","sentence":"^\\QGiven an infinite tree and an automaton, the question of whether the tree is accepted can be seen as a game \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QFor each \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we may define the associated complexity classes, e.g. \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, similar for \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and so on.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\QThe special case of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q yields the singleton set \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qk\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QX^k\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qv\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qv\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q ^k\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qv ^k\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qv k \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QX^Y\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QY X\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QM \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QM\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QM\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qf N \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qf (N) = f(n) n N \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qf\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qf(N)\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QM \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-norm of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, the sum of the absolute values of its elements.\\E$"}
{"rule":"NUMEROUS_DIFFERENT","sentence":"^\\QWQOs admit many different characterizations.\\E$"}
{"rule":"COLLECTIVE_NOUN_VERB_AGREEMENT_VBP","sentence":"^\\QA natural source of examples are gainy models, like gainy counter system machines or gainy communicating finite state machines.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QIn the literature, the notation \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is commonly used.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QWe add a special final place and for each final state of the NFA an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled transition that consumes a token on that state and produces one on the final place.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QTo obtain an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q algorithm for \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, we see the input word \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q as an NFA \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q with \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QSecondly, it yields an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-algorithm for reachability.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QIndependently Leroux21 and CzerwinskiO21 have proven that Petri net reachability is \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-complete by providing an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q lower bound that matches the earlier upper bound from \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qof the thesis, it will be important to have a finite representation of the effect that a finite (but unbounded) word \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q has on an automaton \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"HAVE_PART_AGREEMENT","sentence":"^\\QWe obtain that if \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is an infinite word where \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q are finite words that have same box, then \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is contained in the language of the automaton if and only if \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QOmega.-regular languages.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QOmega.-languages of context-free grammars.\\E$"}
{"rule":"DT_JJ_NO_NOUN","sentence":"^\\QHence, it becomes impossible to reach another sentential form that ends with a nonterminal.\\E$"}
{"rule":"IN_A_X_MANNER","sentence":"^\\QMany works in the literature present word-generating schemes in a different way: They consider deterministic schemes without restricting the terminals to be of arity one.\\E$"}
{"rule":"DT_JJ_NO_NOUN","sentence":"^\\QEach subterm \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q where \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a nonterminal is a redex.\\E$"}
{"rule":"DT_JJ_NO_NOUN","sentence":"^\\QIntuitively, a nonterminal takes the suffix of the terminal word that has already been generated as the parameter \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q of kind \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"OF_ANY_OF","sentence":"^\\QThe order of a HORS is the maximum order of any of its nonterminals.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qof the thesis, we speak of HORS variables.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe define \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to be the unique kind ground of data values.\\E$"}
{"rule":"SOME_OF_THE","sentence":"^\\QWe briefly consider the shape of ideals in some of the WQOs that we have introduced.\\E$"}
{"rule":"NEEDS_FIXED","sentence":"^\\QThis might seem promising since our technical core result only requires ordered LTSes instead of WSTSes.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QWe call a separator that comes from language class \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-separator, and we say that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q are \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-separable if an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-separator exists.\\E$"}
{"rule":"SOME_OF_THE","sentence":"^\\QFinally, we have that each \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q which represents the intersection of some of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q also satisfies \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q by definition.\\E$"}
{"rule":"DOUBLE_PUNCTUATION","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QN_1(n),,\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QA\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QA N_1(n),, =\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QOmega-square.-WSTSes.\\E$"}
{"rule":"UNDER_COMPOUNDS","sentence":"^\\QOne can also show that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-WQOs are closed under taking Cartesian products and under taking the subsequence ordering on finite sequences \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"SENTENCE_WHITESPACE","sentence":"^\\QOmega-squared.-WSTSes.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QHere, we have used that the composition of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q , \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q equals \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QIndependently, Leroux21 and CzerwinskiO21 have proven that Petri net reachability is \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-complete by providing an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q lower bound that matches the earlier upper bound from \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\QThe special case of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q yields the singleton set \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qk\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QX^k\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qv\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qv\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q ^k\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q v ^k\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qv k \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QX^Y\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QY X\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QM \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q M\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QM\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qf N \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q f (N) = f(n) n N \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qf\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Qf(N)\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\QM \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-norm of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, the sum of the absolute values of its elements.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QWe generalize \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to set of words by taking the union.\\E$"}
{"rule":"DT_JJ_NO_NOUN","sentence":"^\\QWe start by noting that if \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a sentential form in a right-infinite left-derivation process, then the next step will not apply a production rule whose rightmost symbol is a terminal: Otherwise, we would end up in a sentential form with a terminal as the rightmost symbol, and it becomes impossible to reach another sentential form that ends in a nonterminal.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QRecall that in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, each transition has an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-labeled variant.\\E$"}
{"rule":"OVER_COMPOUNDS","sentence":"^\\QThis discrepancy is resolved by observing that we associate formulas over states to terms of order zero.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qof the thesis usually rely on the versatility of results\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qof the thesis usually rely on the versatility of results from the literature.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qof this thesis, we focus on languages of well-structured transition systems (WSTSes).\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qof this thesis will be finding an efficient solution for the aforementioned context-free inclusion games.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qof this thesis will be finding a procedure efficiently solving context-free inclusion games.\\E$"}
